import { NextRequest } from "next/server";
import { ReadableStream } from "stream/web";
import { validateConfig } from "@/lib/config";
import { SSEStream, createSSEResponse } from "@/utils/sse";
import { GitHubAPI } from "@/lib/github";
import { LLMService } from "@/lib/llm";
import { SandboxEnvironment } from "@/lib/sandbox";
import { CodeChangeRequest } from "@/types";

export async function POST(req: NextRequest) {
  try {
    // Validate configuration
    validateConfig();

    // Parse request
    const { prompt, repoUrl }: CodeChangeRequest = await req.json();

    if (!prompt || !repoUrl) {
      return new Response(
        JSON.stringify({ error: "Missing prompt or repoUrl" }),
        { status: 400, headers: { "Content-Type": "application/json" } }
      );
    }

    // Create stream for SSE
    const stream = new ReadableStream({
      async start(controller) {
        const sse = new SSEStream(controller);
        
                            try {
                      // Initialize services
                      const github = new GitHubAPI();
                      const llm = new LLMService();
                      const sandbox = new SandboxEnvironment();

                                                      // Parse repository URL
                      sse.sendProgress("Parsing repository URL...");
                      const { owner, repo } = github.parseRepoUrl(repoUrl);

                      // Generate branch name
                      const branchName = github.generateBranchName(prompt);
                      sse.sendProgress(`Generated branch name: ${branchName}`);

                      // Clone repository
                      sse.sendProgress("Cloning repository...");
                      await sandbox.cloneRepository(repoUrl, branchName);
                      sse.sendProgress("Repository cloned successfully");

                      // Get codebase context
                      sse.sendProgress("Analyzing codebase...");
                      const codebaseContext = await sandbox.getCodebaseContext();
                      sse.sendProgress("Codebase analysis complete");

                      // Generate code changes using LLM
                      sse.sendProgress("Generating code changes using AI...");
                      const llmResponse = await llm.generateCodeChanges(repoUrl, prompt, codebaseContext);
                      sse.sendProgress(`Generated ${llmResponse.changes.length} changes`);

                      // Validate changes
                      sse.sendProgress("Validating changes...");
                      llm.validateChanges(llmResponse.changes);
                      await sandbox.validateChanges(llmResponse.changes);
                      sse.sendProgress("Changes validated");

                      // Apply changes
                      sse.sendProgress("Applying changes in sandbox...");
                      await sandbox.applyChanges(llmResponse.changes);
                      sse.sendProgress("Changes applied successfully");

                      // Commit changes
                      sse.sendProgress("Committing changes...");
                      const commitMessage = `feat: ${prompt}\n\n${llmResponse.summary}`;
                      await sandbox.commitChanges(branchName, commitMessage);
                      sse.sendProgress("Changes committed");

                      // Push branch
                      sse.sendProgress("Pushing branch to GitHub...");
                      await sandbox.pushBranch(branchName);
                      sse.sendProgress("Branch pushed successfully");

                      // Create pull request
                      sse.sendProgress("Creating pull request...");
                      const prTitle = `feat: ${prompt}`;
                      const prBody = `## Changes Made\n\n${llmResponse.summary}\n\n## Files Modified\n\n${llmResponse.changes.map(c => `- ${c.file}: ${c.description}`).join('\n')}\n\n---\n\n*This PR was automatically generated by Backspace*`;

                      // Get the default branch for this repository
                      const defaultBranch = await github.getDefaultBranch(owner, repo);
                                            const pr = await github.createPullRequest(owner, repo, prTitle, prBody, branchName, defaultBranch);
                      
                      sse.sendSuccess("Pull request created successfully!", {
                        prUrl: pr.html_url,
                        prNumber: pr.number,
                        branchName,
                        changes: llmResponse.changes,
                        summary: llmResponse.summary
                      });

          // Cleanup
          await sandbox.cleanup();

        } catch (error) {
          console.error('Error in code generation process:', error);
          sse.sendError(error instanceof Error ? error.message : 'An unknown error occurred');
        } finally {
          sse.close();
        }
      },
    });

    return createSSEResponse(stream as globalThis.ReadableStream);

  } catch (error) {
    console.error('API Error:', error);
    return new Response(
      JSON.stringify({ 
        error: error instanceof Error ? error.message : 'Internal server error' 
      }),
      { 
        status: 500, 
        headers: { "Content-Type": "application/json" } 
      }
    );
  }
}
